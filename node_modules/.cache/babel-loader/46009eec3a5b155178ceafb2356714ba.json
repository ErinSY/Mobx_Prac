{"ast":null,"code":"import _initializerDefineProperty from \"/Users/erin_seoyul/Desktop/reactwithmobx/source-template/4.counter-mobx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/erin_seoyul/Desktop/reactwithmobx/source-template/4.counter-mobx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/erin_seoyul/Desktop/reactwithmobx/source-template/4.counter-mobx/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _temp;\n\nimport { observable, action, makeObservable } from 'mobx'; // makeObservable 이 없으면 state를 사용하는 컴포넌트에서 변화를 감지하지 못한다\n// 그리고 아래처럼 construc\n\nlet CounterStore = (_class = (_temp = class CounterStore {\n  constructor() {\n    _initializerDefineProperty(this, \"count\", _descriptor, this);\n\n    makeObservable(this); //이부분을 꼭!! 생성해주어야 함\n  }\n\n  get count() {\n    // get 메서드 : 사용자가 속성값을 꺼내서 사용하고 싶을때 실행\n    return this.count;\n  }\n\n  // state를 바꿔주는 action 추가\n  increament() {\n    this.count++;\n    console.log(this.count);\n  }\n\n  decrement() {\n    this.count--;\n    console.log(this.count);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"count\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 5;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"increament\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"increament\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"decrement\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"decrement\"), _class.prototype)), _class); // 위의 데이터를 컴포넌트에서 state로 활용할 수 있는지 보려면 export 할때 new 를 붙여준다\n\nexport default new CounterStore();","map":{"version":3,"sources":["/Users/erin_seoyul/Desktop/reactwithmobx/source-template/4.counter-mobx/src/store/CounterStore.js"],"names":["observable","action","makeObservable","CounterStore","constructor","count","increament","console","log","decrement"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,cAA7B,QAAmD,MAAnD,C,CACA;AACA;;IACMC,Y,sBAAN,MAAMA,YAAN,CAAmB;AACjBC,EAAAA,WAAW,GAAG;AAAA;;AACZF,IAAAA,cAAc,CAAC,IAAD,CAAd,CADY,CACY;AACzB;;AAID,MAAIG,KAAJ,GAAY;AACV;AACA,WAAO,KAAKA,KAAZ;AACD;;AAEO;AACRC,EAAAA,UADA,GACa;AACX,SAAKD,KAAL;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAjB;AACD;;AAGDI,EAAAA,SADA,GACY;AACV,SAAKJ,KAAL;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAjB;AACD;;AAtBgB,C,+EAIhBL,U;;;;;WACO,C;;+DAOPC,M,iJAMAA,M,gGAMH;;AACA,eAAe,IAAIE,YAAJ,EAAf","sourcesContent":["import { observable, action, makeObservable } from 'mobx';\n// makeObservable 이 없으면 state를 사용하는 컴포넌트에서 변화를 감지하지 못한다\n// 그리고 아래처럼 construc\nclass CounterStore {\n  constructor() {\n    makeObservable(this);   //이부분을 꼭!! 생성해주어야 함\n  }\n  @observable\n  count = 5;\n\n  get count() {\n    // get 메서드 : 사용자가 속성값을 꺼내서 사용하고 싶을때 실행\n    return this.count;\n  }\n\n  @action // state를 바꿔주는 action 추가\n  increament() {\n    this.count++;\n    console.log(this.count);\n  }\n\n  @action\n  decrement() {\n    this.count--;\n    console.log(this.count);\n  }\n}\n// 위의 데이터를 컴포넌트에서 state로 활용할 수 있는지 보려면 export 할때 new 를 붙여준다\nexport default new CounterStore();\n"]},"metadata":{},"sourceType":"module"}